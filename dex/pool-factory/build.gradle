version = ''

// for integration tests
sourceSets {
    intTest {}
}
configurations {
    intTestImplementation.extendsFrom testImplementation
    intTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
    compileOnly 'foundation.icon:javaee-api:0.9.2'
    implementation 'io.havah:havah-tokens:0.0.5'

    testImplementation 'foundation.icon:javaee-unittest:0.9.7'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'

    intTestImplementation 'foundation.icon:javaee-integration-test:0.9.0'
    intTestImplementation 'foundation.icon:icon-sdk:2.2.0'
}

optimizedJar {
    mainClassName = 'io.havah.contract.PoolFactory'
    archivesBaseName = 'pool-factory'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

deployJar {
    endpoints {
        lisbon {
            uri = 'https://lisbon.net.solidwallet.io/api/v3'
            nid = 0x2
        }
        local {
            uri = 'http://localhost:9082/api/v3'
            nid = 0x3
        }
    }
    keystore = rootProject.hasProperty('keystoreName') ? "$keystoreName" : ''
    password = rootProject.hasProperty('keystorePass') ? "$keystorePass" : ''
}

test {
    useJUnitPlatform()
}

def LiquidityTokenJar = project(':liquidity-token').getTasks().getByName('optimizedJar')
def LiquidityPoolJar = project(':liquidity-pool').getTasks().getByName('optimizedJar')

task integrationTest(type: Test, dependsOn: optimizedJar) {
    useJUnitPlatform()
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
    testLogging.showStandardStreams = true

    // use the common config files
    systemProperty('env.props', new File(project(':testinteg').projectDir, 'conf/env.props'))

    def prefix = 'score.path.'
    systemProperty(prefix + project.name, optimizedJar.outputJarName)
    systemProperty(prefix + 'liquidity-token', LiquidityTokenJar.outputJarName)
    systemProperty(prefix + 'liquidity-pool', LiquidityPoolJar.outputJarName)
}

integrationTest.dependsOn(LiquidityTokenJar)
integrationTest.dependsOn(LiquidityPoolJar)